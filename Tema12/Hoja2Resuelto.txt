1.

CREATE OR REPLACE
PROCEDURE pedido_ap_cliente
AS
  CURSOR curs1
  IS
    SELECT apellidos,
      fecha_pedido,
      numero_pedido
    FROM clientes NATURAL
    JOIN pedidos
    ORDER BY apellidos;
  v_apellidos clientes.apellidos%TYPE;
  v_fecha_pedido pedidos.fecha_pedido%TYPE;
  v_numero_pedido pedidos.numero_pedido%TYPE;
BEGIN
  OPEN curs1;
  LOOP
    FETCH curs1 INTO v_apellidos, v_fecha_pedido, v_numero_pedido;
    EXIT
  WHEN curs1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_apellidos || '*' || v_fecha_pedido || '*' || v_numero_pedido);
  END LOOP;
  CLOSE curs1;
END;


2.

CREATE OR REPLACE
PROCEDURE categoria_descr_numProd
AS
  CURSOR curs1
  IS
    SELECT categorias.descripcion,
      COUNT(*)
    FROM productos
    JOIN categorias USING (id_categoria)
    GROUP BY categorias.descripcion;
  v_descripcion categorias.descripcion%TYPE;
  v_numero NUMBER;
BEGIN
  OPEN curs1;
  LOOP
    FETCH curs1 INTO v_descripcion, v_numero;
    EXIT WHEN curs1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_descripcion || chr(9) || v_numero ||' productos');
  END LOOP;
  CLOSE curs1;
END;


3.

CREATE OR REPLACE
PROCEDURE ejercicio3 (cadena varchar2)
AS
  v_contador NUMBER;
  v_apellidos empleados.apellidos%TYPE;
  v_id_empleado empleados.id_empleado%TYPE;
  CURSOR curs1
  IS
    SELECT apellidos, id_empleado FROM empleados WHERE apellidos LIKE '%'||cadena||'%';
BEGIN
DBMS_OUTPUT.PUT_LINE('Apellidos     Id empleado');
  OPEN curs1;
  LOOP
    FETCH curs1 INTO v_apellidos, v_id_empleado;
    EXIT
  WHEN curs1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_apellidos || '          ' ||v_id_empleado);
  END LOOP;
  CLOSE curs1;
END;

4.
CREATE OR REPLACE
PROCEDURE ejercicio4
AS
  CURSOR cursor1
  IS
    SELECT apellidos,
      suma
    FROM
      (SELECT SUM(precio_total) AS suma,
        apellidos,
        id_cliente
      FROM clientes NATURAL
      JOIN pedidos
      GROUP BY apellidos,
        id_cliente
      ORDER BY SUM(precio_total) DESC
      )
  WHERE rownum <=5;
  v_apellidos clientes.apellidos%TYPE;
  v_suma number;
BEGIN
  OPEN cursor1;
  LOOP
    FETCH cursor1 INTO v_apellidos, v_suma;
    EXIT
  WHEN cursor1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_apellidos || '          ' ||v_suma);
  END LOOP;
  CLOSE cursor1;
END;
5.

CREATE OR REPLACE
PROCEDURE EJERCICIO6
AS
  v_categoria categorias.id_categoria%TYPE;
  v_producto productos.numero_producto%TYPE;
  v_cat categorias.id_categoria%TYPE;
  CURSOR categoria
  IS
    SELECT id_categoria FROM categorias;
  CURSOR curs1
  IS
    SELECT numero_producto,
      categoria
    FROM
      (SELECT numero_producto,
        SUM(cantidad) AS suma,
        id_categoria  AS categoria
      FROM productos j NATURAL
      JOIN detalles_pedidos
      GROUP BY numero_producto,
        id_categoria
      ORDER BY id_categoria,
        suma
      )
  WHERE rownum <=2
  AND categoria = v_categoria;
BEGIN
  dbms_output.put_line('Numero de producto    ID_CATEGORIA');
  OPEN categoria;
  LOOP
    FETCH categoria INTO v_categoria;
    EXIT
  WHEN categoria%notfound;
    OPEN curs1;
    LOOP
      FETCH curs1 INTO v_producto, v_cat;
      EXIT
    WHEN curs1%notfound;
      dbms_output.put_line(v_producto ||'                     ' || v_cat);
    END LOOP;
    CLOSE curs1;
  END LOOP;
  CLOSE categoria;
END;

6.


CREATE OR REPLACE
PROCEDURE ejercicio6
AS
  CURSOR curs1
  IS
    SELECT nombre,
      precio_venta,
      id_categoria,
      stock
    FROM productos
    ORDER BY id_categoria;
  --Variables que almacenan el precio de venta de los productos y su nombre
  v_precio_venta productos.precio_venta%TYPE;
  v_nombre productos.nombre%TYPE;
  --Variables que almacenan suma de valores
  v_valor_categoria NUMBER:=0;
  v_valor_total     NUMBER:=0;
  --Variables de numero de productos
  v_numero_pro_categoria NUMBER:=0;
  v_numero_total_pro     NUMBER:=0;
  --Variables que almacenan categoria actual y categoria de producto
  v_categoria_actual productos.id_categoria%TYPE;
  v_id_categoria productos.id_categoria%TYPE;
  --Variable que almacena el stock del producto actual
  v_stock productos.stock%TYPE;
BEGIN
  v_categoria_actual:=1;
  OPEN curs1;
  LOOP
    FETCH curs1 INTO v_nombre, v_precio_venta, v_id_categoria, v_stock;
    IF v_id_categoria    != v_categoria_actual OR curs1%NOTFOUND THEN
      v_valor_total      := v_valor_total      + v_valor_categoria;
      v_numero_total_pro := v_numero_total_pro + v_numero_pro_categoria;
      DBMS_OUTPUT.PUT_LINE('Categoria: ' || v_categoria_actual);
      DBMS_OUTPUT.PUT_LINE('            Número total de productos:' || v_numero_pro_categoria);
      DBMS_OUTPUT.PUT_LINE('            Valor total de productos:' || v_valor_categoria || '€');
      v_valor_categoria      :=0;
      v_numero_pro_categoria := 0;
      v_categoria_actual     := v_id_categoria;
    END IF;
    IF NOT curs1%NOTFOUND THEN
      DBMS_OUTPUT.PUT_LINE('Producto:      '|| v_nombre || '     '||v_precio_venta||'€');
      v_numero_pro_categoria:= v_numero_pro_categoria + 1;
      v_valor_categoria     := v_valor_categoria      + (v_precio_venta * v_stock);
    END IF;
    EXIT
  WHEN curs1%NOTFOUND;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('NUMERO TOTAL DE PRODUCTOS:' ||v_numero_total_pro);
  DBMS_OUTPUT.PUT_LINE('VALOR TOTAL DE PRODUCTOS:' ||v_valor_total||'€');
END;


7.

CREATE OR REPLACE
PROCEDURE ejercicio7(
    descripcion VARCHAR2)
AS
  v_id_cat categorias.id_categoria%TYPE;
BEGIN
  SELECT numero - MOD(numero,10) + 10
  INTO v_id_cat
  FROM
    ( SELECT MAX(id_categoria) AS numero FROM categorias
    );
  INSERT INTO categorias VALUES
    (v_id_cat, descripcion
    );
EXCEPTION
WHEN OTHERS THEN
  raise_application_error(-20000, 'Error en la aplicación');
END;

8.

CREATE OR REPLACE
PROCEDURE ejercicio8(
    numero         NUMBER,
    nombre         VARCHAR2 := NULL,
    descripcion    VARCHAR2 :=NULL,
    precio_venta   NUMBER   :=0,
    stock          NUMBER   :=0,
    v_id_categoria NUMBER   :=0)
AS
  ERR_STOCK  EXCEPTION;
  ERR_PRECIO EXCEPTION;
  v_categorias categorias%ROWTYPE;
BEGIN
  SELECT *
  INTO v_categorias
  FROM categorias
  WHERE id_categoria = v_id_categoria;
  IF(precio_venta   <=0) THEN
    raise err_precio;
  END IF;
  IF (stock < 0) THEN
    raise err_stock;
  END IF;
  INSERT
  INTO productos VALUES
    (
      numero,
      nombre,
      descripcion,
      precio_venta,
      stock,
      v_id_categoria
    );
EXCEPTION
WHEN no_data_found THEN
  raise_application_error(-20004,'La categoria no existe');
WHEN err_stock THEN
  raise_application_error(-20003,'El stock no puede ser menor de 0');
WHEN err_precio THEN
  raise_application_error(-20002,'El precio no puede ser menor de 0');
WHEN dup_val_on_index THEN
  raise_application_error(-20001,'Ya existe un producto con ese numero');
WHEN OTHERS THEN
  raise_application_error(-20000, 'Error en la aplicación');
END;
s
9.

CREATE OR REPLACE
PROCEDURE ejercicio9(
    categoria  NUMBER,
    importe    NUMBER,
    porcentaje NUMBER)
AS
  v_precio           NUMBER;
  v_precioimporte    NUMBER;
  v_precioporcentaje NUMBER;
  CURSOR prod
  IS
    SELECT precio_venta FROM productos WHERE id_categoria=categoria FOR UPDATE;
BEGIN
  OPEN prod;
  FETCH prod INTO v_precio;
  WHILE prod%FOUND
  LOOP
    v_precioporcentaje := v_precio*((100+porcentaje)/100);
    v_precioimporte    := v_precio+ importe;
    IF(v_precioimporte  >v_precioporcentaje) THEN
      UPDATE productos SET precio_venta=v_precioimporte WHERE CURRENT OF prod;
    ELSE
      UPDATE productos SET precio_venta=v_precioporcentaje WHERE CURRENT OF prod;
    END IF;
    FETCH prod INTO v_precio;
  END LOOP;
  CLOSE prod;
END;

10.

CREATE OR REPLACE
PROCEDURE ejercicio10(
    categoria  NUMBER,
    importe    NUMBER,
    porcentaje NUMBER)
AS
  v_precio           NUMBER;
  v_precioimporte    NUMBER;
  v_precioporcentaje NUMBER;
  CURSOR prod
  IS
    SELECT precio_venta FROM productos WHERE id_categoria=categoria FOR UPDATE;
BEGIN
  OPEN prod;
  FETCH prod INTO v_precio;
  WHILE prod%FOUND
  LOOP
    v_precioporcentaje := v_precio*((100+porcentaje)/100);
    v_precioimporte    := v_precio+ importe;
    IF(v_precioimporte  >v_precioporcentaje) THEN
      UPDATE productos SET precio_venta=v_precioimporte WHERE CURRENT OF prod;
    ELSE
      UPDATE productos SET precio_venta=v_precioporcentaje WHERE CURRENT OF prod;
    END IF;
    FETCH prod INTO v_precio;
  END LOOP;
  CLOSE prod;
END;

11.
CREATE OR REPLACE
PROCEDURE ejercicio11(
    categoria  NUMBER,
    porcentaje NUMBER)
AS
  v_precioporcentaje NUMBER;
  CURSOR prod
  IS
    SELECT precio_venta,
      rowid
    FROM productos
    WHERE id_categoria=categoria FOR UPDATE;
    v_cursor prod%ROWTYPE;
BEGIN
  OPEN prod;
  FETCH prod INTO v_cursor;
  WHILE prod%FOUND
  LOOP
    v_precioporcentaje := v_cursor.precio_venta*((100+porcentaje)/100);
    UPDATE productos SET precio_venta=v_precioporcentaje WHERE rowid=v_cursor.rowid;
    FETCH prod INTO v_cursor;
  END LOOP;
  CLOSE prod;
END;

12.

CREATE OR REPLACE
PROCEDURE ejercicio12
AS
  v_precio_medio productos.precio_venta%TYPE;
  v_subida       productos.precio_venta%TYPE;
  v_categoria productos.id_categoria%TYPE;
  v_nuevo_precio productos.precio_venta%TYPE;
  CURSOR prod
  IS
    SELECT precio_venta,
      rowid
    FROM productos
    WHERE id_categoria = v_categoria FOR UPDATE;
  v_cursor prod%ROWTYPE;
  CURSOR categorias
  IS
    SELECT id_categoria FROM productos group by id_categoria order by id_categoria;
BEGIN
  OPEN categorias;
  FETCH categorias INTO v_categoria;
  WHILE categorias%FOUND
  LOOP
    SELECT AVG(precio_venta)
    INTO v_precio_medio
    FROM productos
    WHERE id_categoria = v_categoria;
    dbms_output.put_line(v_precio_medio);
    OPEN prod;
    FETCH prod INTO v_cursor;
    WHILE prod%FOUND
    LOOP
      IF (v_precio_medio > v_cursor.precio_venta) THEN
        v_subida        := v_precio_medio - v_cursor.precio_venta;
        v_subida        := v_subida       *50/100;
        v_nuevo_precio := v_cursor.precio_venta + v_subida;
        UPDATE productos
        SET precio_venta = v_nuevo_precio
        WHERE rowid      =v_cursor.rowid;
      END IF;
    FETCH prod INTO v_cursor;
    END LOOP;
    CLOSE prod;
    FETCH categorias INTO v_categoria;
  END LOOP;
  CLOSE categorias;
END;

13.

CREATE OR REPLACE
PROCEDURE ejercicio13
AS
  CURSOR pedido
  IS
    SELECT numero_pedido,
      fecha_pedido,
      fecha_envio,
      id_cliente,
      id_empleado,
      precio_total
    FROM pedidos NATURAL
    JOIN clientes
    ORDER BY apellidos;
  v_cursor pedido%ROWTYPE;
  v_ap_cliente clientes.apellidos%TYPE;
  v_ap_empl empleados.apellidos%TYPE;
  v_nombre_prod productos.nombre%TYPE;
  v_idcliente_actual clientes.id_cliente%TYPE;
  v_coste_pedido    NUMBER;
  v_importe_cliente NUMBER:=0;
  v_importe_total   NUMBER:=0;
  v_numero_lineas   NUMBER;
  CURSOR detalles
  IS
    SELECT * FROM detalles_pedidos WHERE numero_pedido = v_cursor.numero_pedido;
  v_detalles detalles%ROWTYPE;
BEGIN
  dbms_output.put_line('******************************');
  OPEN pedido;
  FETCH pedido INTO v_cursor;
  WHILE pedido%FOUND
  LOOP
    v_numero_lineas:=0;
    v_coste_pedido :=0;
    SELECT apellidos
    INTO v_ap_cliente
    FROM clientes
    WHERE id_cliente    = v_cursor.id_cliente;
    v_idcliente_actual := v_cursor.id_cliente;
    SELECT apellidos
    INTO v_ap_empl
    FROM empleados
    WHERE id_empleado = v_cursor.id_empleado;
    dbms_output.put_line('Datos del pedido:       Cliente: '|| v_ap_cliente ||'       Empleado que atendió: ' || v_ap_empl || '    Fecha: ' || v_cursor.fecha_pedido);
    OPEN detalles;
    FETCH detalles INTO v_detalles;
    WHILE detalles%FOUND
    LOOP
      SELECT nombre
      INTO v_nombre_prod
      FROM productos
      WHERE numero_producto = v_detalles.numero_producto;
      dbms_output.put_line('Nombre de producto: ' || v_nombre_prod || '   Unidades pedidas: ' ||v_detalles.cantidad || '  Precio por unidad: ' || v_detalles.precio ||'€');
      FETCH detalles INTO v_detalles;
      v_numero_lineas := v_numero_lineas + 1;
    END LOOP;
    dbms_output.put_line('Numero de líneas del pedido: ' || v_numero_lineas);
    dbms_output.put_line('Importe total del pedido: ' ||v_cursor.precio_total||'€');
    v_importe_cliente := v_importe_cliente + v_cursor.precio_total;
    v_importe_total   := v_importe_total   + v_cursor.precio_total;
    CLOSE detalles;
    dbms_output.put_line('');
    dbms_output.put_line('______________________________');
    FETCH pedido INTO v_cursor;
    IF(v_cursor.id_cliente != v_idcliente_actual) THEN
      dbms_output.put_line('--------------');
      dbms_output.put_line('Importe total de todos los pedidos del cliente: ' ||v_importe_cliente||'€');
      dbms_output.put_line('______________');
      v_importe_cliente  := 0;
      v_idcliente_actual := v_cursor.id_cliente;
    END IF;
  END LOOP;
  dbms_output.put_line('--------------');
  dbms_output.put_line('Importe total de todos los pedidos del cliente: ' ||v_importe_cliente||'€');
  dbms_output.put_line('______________');
  CLOSE pedido;
  dbms_output.put_line('Importe total de todos los pedidos: ' ||v_importe_total||'€');
  dbms_output.put_line('******************************');
END;

14.
